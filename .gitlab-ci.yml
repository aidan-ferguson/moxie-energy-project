# Should only run specific jobs when:
#   Files in relavent folder change
# Run full stack on merge request

# CI variables
variables:
  BACKEND_DIR: $CI_PROJECT_DIR/backend
  FRONTEND_DIR: $CI_PROJECT_DIR/frontend
  UNITY_PROJECT_DIR: $FRONTEND_DIR/moxie-unity
  UNITY_BUILD_PATH: $FRONTEND_DIR/unity-module
  ANDROID_PROJECT_DIR: $FRONTEND_DIR/main-app
  ANDROID_COMPILE_SDK: "33"
  ANDROID_BUILD_TOOLS: "30.0.3"
  ANDROID_SDK_TOOLS: "9123335"

# Backend CI pipeline
# Install all the dependancies required to build/test the backend
.backend:setup: &backend-setup
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y 
  - apt-get install -y python3 python3-pip
  - apt-get -y upgrade
  - pip3 install -r backend/requirements.txt

# 'Build' the backend (database and syntax checking)
backend:build:
  stage: build
  needs: []
  image: ubuntu:20.04
  before_script:
    - *backend-setup
  script:
    - cd $BACKEND_DIR
    - python3 manage.py makemigrations
    - python3 manage.py migrate
    - python3 manage.py check 
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes: 
      - $BACKEND_DIR/**/*

# Test the backend, run the django tests
backend:test:
  stage: test
  needs: ["backend:build"]
  image: ubuntu:20.04
  before_script:
    - *backend-setup
  script:
    - cd $BACKEND_DIR
    - python3 manage.py test

# Run a linter on the backend
backend:lint:
  stage: test
  needs: ["backend:build"]
  image: ubuntu:20.04
  before_script:
    - *backend-setup
  script:
    - cd $BACKEND_DIR
    - apt-get install pylint -y
    - find . -type f -name "*.py" | xargs pylint --errors-only

# Frontend Unity CI Pipeline
# Modified from https://gitlab.com/game-ci/unity3d-gitlab-ci-example
.unity:setup: &unity-setup
  # Write unity license (from gitlab variables) to file
  - if [ -z $UNITY_LICENSE ]; then bash scripts/ci_unity_activation.bash; exit 1; fi
  - mkdir -p /root/.cache/unity3d
  - mkdir -p /root/.local/share/unity3d/Unity
  - echo "$UNITY_LICENSE" > /root/.local/share/unity3d/Unity/Unity_lic.ulf
  - cat /root/.local/share/unity3d/Unity/Unity_lic.ulf

unity:build:
  stage: build
  needs: []
  image: unityci/editor:2020.3.41f1-android-1
  before_script:
    - *unity-setup
  script:
    # Creates a headless X server which runs the unity editor and builds the project
    - xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' 
      unity-editor -projectPath $UNITY_PROJECT_DIR -quit -batchmode -nographics -buildTarget Android
      -customBuildTarget Android -customBuildPath $UNITY_BUILD_PATH -executeMethod BuildCommand.PerformBuild -logFile /dev/stdout
    - UNITY_EXIT_CODE=$?
    - if [ $UNITY_EXIT_CODE -ne 0]; then exit $UNITY_EXIT_CODE; fi
    # Also save ndk version information so we can build full android project
    # Bit hacky but get ndk path from unity module, then copy source.properties file with version in it
    - eval $(cat $UNITY_BUILD_PATH/local.properties | tr "." "_") # Replace . with _
    - cp $ndk_dir/source.properties $UNITY_BUILD_PATH/source.properties
  artifacts:
    paths:
      - $UNITY_BUILD_PATH
    expire_in: "2 hours"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes: 
      - $UNITY_PROJECT_DIR/**/*

unity:test:
  stage: test
  needs: ["unity:build"]
  image: unityci/editor:2020.3.41f1-android-1
  before_script:
    - *unity-setup
  script:
    - cat /opt/unity/Editor/Data/PlaybackEngines/AndroidPlayer/NDK/source.properties
    - echo "Need to make tests"

# Frontend android pipeline
# Gradle has a built in linter so we don't need a seperate lint stage
# Adapted from https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml
android:build:
  stage: build
  needs: ["unity:build"]
  image: openjdk:8-jdk
  before_script:
    # Install dependancies and setup
    - apt-get --quiet update -y
    - apt-get install -y wget tar unzip lib32stdc++6 lib32z1 python3
    - export ANDROID_HOME="${PWD}/android-home"
    - mkdir -p "$ANDROID_HOME"
    # Download and extract the sdkmanager
    - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    - pushd $ANDROID_HOME
    - unzip -d cmdline-tools cmdline-tools.zip
    - popd
    - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/cmdline-tools/bin/
    # Find NDK version from source.properties file
    - eval $(cat $UNITY_BUILD_PATH/source.properties | tr "." "_" | tr -d " ")
    - android_ndk_version=$(echo $Pkg_Revision | tr "_" ".")
    - echo "Using NDK version - $android_ndk_version"
    # Confirm sdkmanager installed and download dependancies
    - sdkmanager --version
    - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true # Accept all licenses
    - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
    - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
    - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"
    - sdkmanager --sdk_root=${ANDROID_HOME} "ndk;${android_ndk_version}"
    - sdkmanager --sdk_root=${ANDROID_HOME} "cmake;3.22.1"
    - cd "$ANDROID_PROJECT_DIR"
    # Set SDK installation path
    - echo "sdk.dir=${ANDROID_HOME}" > local.properties
    - chmod +x ./gradlew
    - chmod +x $UNITY_BUILD_PATH/unityLibrary/src/main/Il2CppOutputProject/IL2CPP/build/deploy/netcoreapp3.1/il2cpp
  script:
    - pushd $CI_PROJECT_DIR/frontend
    - python3 ./convert_unity_module.py
    - popd
    # Need to disable localisation to build IL2CPP - https://learn.microsoft.com/en-us/dotnet/core/runtime-config/globalization
    - export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
    - ./gradlew build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes: 
      - $FRONTEND_DIR/**/*