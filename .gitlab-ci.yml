# Should only run specific jobs when:
#   Files in relavent folder change
# Run full stack on merge request

# CI variables
variables:
  BACKEND_DIR: $CI_PROJECT_DIR/backend
  FRONTEND_DIR: $CI_PROJECT_DIR/frontend
  UNITY_PROJECT_DIR: $FRONTEND_DIR/moxie-unity
  UNITY_BUILD_PATH: $FRONTEND_DIR/unity-module
  ANDROID_PROJECT_DIR: $FRONTEND_DIR/main-app

# Backend CI pipeline
# Install all the dependancies required to build/test the backend
.backend:setup: &backend-setup
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y 
  - apt-get install -y python3 python3-pip python3-venv
  - cd $BACKEND_DIR
  - python3 -m venv venv
  - source venv/bin/activate
  - python3 -m pip install -r requirements.txt

# Job rules & caching for backend jobs
.backend:rules: &backend-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes: 
      # Can't use CI variables here
      - backend/**/*
  cache:
    paths:
      - backend/venv

# 'Build' the backend (database and syntax checking)
backend:build:
  stage: build
  needs: []
  image: python:3.9
  before_script:
    - *backend-setup
  script:
    - python3 manage.py makemigrations
    - python3 manage.py migrate
    - python3 manage.py check 
  <<: *backend-rules

# Test the backend, run the django tests
backend:test:
  stage: test
  needs: ["backend:build"]
  image: python:3.9
  before_script:
    - *backend-setup
  script:
    - python3 manage.py test api/tests
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
      junit: backend/nosetests.xml
    paths:
      - backend/nosetests.xml
  <<: *backend-rules
  

# Run a linter on the backend
backend:lint:
  stage: test
  needs: ["backend:build"]
  image: python:3.9
  before_script:
    - *backend-setup
  script:
    - python -m pip install flake8
    # Lint and ignore line too long warnings and blank line whitespace (generated by vscode automatically)
    - find api backend scripts -type f -name "*.py" | xargs python -m flake8 --extend-ignore E501,W293
  allow_failure: true
  <<: *backend-rules

# Frontend Unity CI Pipeline
# Modified from https://gitlab.com/game-ci/unity3d-gitlab-ci-example
.unity:setup: &unity-setup
  # Write unity license (from gitlab variables) to file
  - if [ -z $UNITY_LICENSE ]; then bash scripts/ci_unity_activation.bash; exit 1; fi
  - mkdir -p /root/.cache/unity3d
  - mkdir -p /root/.local/share/unity3d/Unity
  - echo "$UNITY_LICENSE" > /root/.local/share/unity3d/Unity/Unity_lic.ulf
  - cat /root/.local/share/unity3d/Unity/Unity_lic.ulf

# Rules for frontend jobs
.frontend:rules: &frontend-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes: 
      # Can't use CI variables here
      - frontend/**/*

unity:build:
  stage: build
  needs: []
  image: unityci/editor:2020.3.41f1-android-1
  before_script:
    - *unity-setup
  script:
    # Creates a headless X server which runs the unity editor and builds the project
    - xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' 
      unity-editor -projectPath $UNITY_PROJECT_DIR -quit -batchmode -nographics -buildTarget Android
      -customBuildTarget Android -customBuildPath $UNITY_BUILD_PATH -executeMethod BuildCommand.PerformBuild -logFile /dev/stdout
    - UNITY_EXIT_CODE=$?
    - if [ $UNITY_EXIT_CODE -ne 0]; then exit $UNITY_EXIT_CODE; fi
    # Also save ndk version information so we can build full android project
    # Bit hacky but get ndk path from unity module, then copy source.properties file with version in it
    - eval $(cat $UNITY_BUILD_PATH/local.properties | tr "." "_") # Replace . with _
    - cp $ndk_dir/source.properties $UNITY_BUILD_PATH/source.properties
  artifacts:
    when: on_success
    paths:
      - $UNITY_BUILD_PATH
    expire_in: "2 hours"
  <<: *frontend-rules

# Frontend android pipeline
# Gradle has a built in linter so we don't need a seperate lint stage
.android:before: &android-before
    - cd "$ANDROID_PROJECT_DIR"
    # Set SDK installation path
    - echo "sdk.dir=${ANDROID_HOME}" > local.properties
    - chmod +x ./gradlew

# Adapted from https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml
android:build:
  stage: build
  needs: ["unity:build"]
  image: sh22/android:latest
  before_script:
    - *android-before
  script:
    - chmod +x $UNITY_BUILD_PATH/unityLibrary/src/main/Il2CppOutputProject/IL2CPP/build/deploy/netcoreapp3.1/il2cpp
    - pushd $CI_PROJECT_DIR/frontend
    - python3 ./convert_unity_module.py
    - popd
    # Need to disable localisation to build IL2CPP - https://learn.microsoft.com/en-us/dotnet/core/runtime-config/globalization
    - export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
    - ./gradlew assemble -PBuildUnity=true
    - ./gradlew signingReport
  artifacts:
    expire_in: "2 days"
    when: on_success
    paths:
      - $ANDROID_PROJECT_DIR/app/build
  <<: *frontend-rules

# Run the unit tests on the frontend and generate coverage reports
android:test:
  stage: test
  needs: ["android:build"]
  image: sh22/android:latest
  before_script:
    - *android-before
  script:
    # Run unit tests and generate coverage information
    - ./gradlew jacocoTestReport
  coverage: '/    - Instruction Coverage: ([0-9.]+)%/'
  artifacts:
    when: always
    expire_in: "2 days"
    paths:
      - $ANDROID_PROJECT_DIR/app/build
    reports:
      junit: $ANDROID_PROJECT_DIR/app/build/test-results/*/TEST-*.xml
  <<: *frontend-rules

# For full stack testing with the django backed and a simulated device on the frontend 
integration_test:
  stage: test
  needs: ["android:build", "backend:test"]
  image: sh22/android:latest
  before_script:
    - *android-before
    - *backend-setup
  script:
    # Finish setting up backend
    - cd $BACKEND_DIR
    - python3 reset_db.py
    # Only download the small datasets
    - python3 setup.py --exclude-dale house_1,house_2,house_5
    - python3 manage.py runserver&
    - cd $ANDROID_PROJECT_DIR
    # Start the emulator from the docker container and run UI testing
    - emulator @moxie_emulator -no-window -no-boot-anim &
    - /bin/sleep 10 # Give the emulator time to boot
    - ./gradlew createDebugCoverageReport
    - COVERAGE=$(cat $ANDROID_PROJECT_DIR/app/build/reports/coverage/debug/index.html | grep -o 'Total[^%]*%' | sed 's/.*>\([0-9,.]*\)%.*/\1%/')
    - echo coverage-$COVERAGE
  coverage: '/coverage-([0-9.]+)%/'
  artifacts:
    when: always
    expire_in: "7 days"
    paths:
      - $ANDROID_PROJECT_DIR/app/build/reports/coverage/debug/
      - $ANDROID_PROJECT_DIR/app/build/outputs/androidTest-results/connected
    reports:
      junit: $ANDROID_PROJECT_DIR/app/build/outputs/androidTest-results/connected/TEST-*.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'